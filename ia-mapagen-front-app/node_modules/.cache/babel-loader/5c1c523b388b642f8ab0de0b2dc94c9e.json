{"ast":null,"code":"var _jsxFileName = \"C:\\\\IA_MapaGen\\\\Web\\\\frontend\\\\ia-mapagen-front\\\\ia-mapagen-front-app\\\\src\\\\screens\\\\VideoProcessor.js\";\nimport React, { useState } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport FileUploader from \"../components/FileUploader\";\nimport SliderSelector from \"../components/SliderSelector\";\nimport ProcessingProgress from \"../components/ProcessingProgress\";\n\nconst VideoProcessor = () => {\n  const [personMatch, setPersonMatch] = useState(1);\n  const [skippedFrames, setSkippedFrames] = useState(10);\n  const [videoFile, setVideoFile] = useState(\"\");\n  const [neuralMap, setNeuralMap] = useState(\"\");\n  const [classFile, setClassFile] = useState(\"\");\n  const [outputDirectory, setOutputDirectory] = useState(\"\");\n  const [generateHeatMap, setGenerateHeatMap] = useState(\"NO\");\n  const [processInProgress, setProcessInProgress] = useState(false);\n  const videoProcessorSettings = {\n    personMatch,\n    skippedFrames,\n    videoFile,\n    neuralMap,\n    classFile,\n    outputDirectory,\n    generateHeatMap\n  };\n\n  const onStartClick = () => {\n    setProcessInProgress(true); // Acá tendríamos que esta info de alguna manera mandarla al programa para que la pueda interpretar\n\n    console.log(JSON.stringify(videoProcessorSettings));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"video-processor-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, \"IA MapaGen - Procesador de video\"), /*#__PURE__*/React.createElement(FileUploader, {\n    legend: \"Video a analizar\",\n    uploadFile: setVideoFile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FileUploader, {\n    legend: \"Red neuronal\",\n    uploadFile: setNeuralMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FileUploader, {\n    legend: \"Archivo de clases\",\n    uploadFile: setClassFile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    name: \"mapaCalor\",\n    onChange: setGenerateHeatMap,\n    value: \"SI\",\n    checked: generateHeatMap === \"SI\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }), \" SI\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    name: \"mapaCalor\",\n    onChange: setGenerateHeatMap,\n    value: \"NO\",\n    checked: generateHeatMap === \"NO\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 4\n    }\n  }), \" NO\", /*#__PURE__*/React.createElement(SliderSelector, {\n    label: \"Porcentaje de coincidencia para detecciones\",\n    explanation: \"Se recomienda ingresar un valor bajo para que se detecte a todas las personas de la imagen, por m\\xE1s que tenga una baja probabilidad de ser una persona.\",\n    values: {\n      min: 1,\n      max: 99,\n      default: personMatch,\n      setter: setPersonMatch\n    },\n    isPercentage: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SliderSelector, {\n    label: \"Cada cuantos frames analizar\",\n    explanation: \"Se saltear\\xE1n varios frames para acelerar el procesamiento del video. A mayor n\\xFAmero, procesamiento m\\xE1s r\\xE1pido.\",\n    values: {\n      min: 1,\n      max: 24,\n      default: skippedFrames,\n      setter: setSkippedFrames\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: onStartClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, \"Iniciar\"), /*#__PURE__*/React.createElement(ProcessingProgress, {\n    isOpen: processInProgress,\n    close: () => setProcessInProgress(false),\n    estado: videoProcessorSettings,\n    heatMap: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default VideoProcessor;","map":{"version":3,"sources":["C:/IA_MapaGen/Web/frontend/ia-mapagen-front/ia-mapagen-front-app/src/screens/VideoProcessor.js"],"names":["React","useState","Button","FileUploader","SliderSelector","ProcessingProgress","VideoProcessor","personMatch","setPersonMatch","skippedFrames","setSkippedFrames","videoFile","setVideoFile","neuralMap","setNeuralMap","classFile","setClassFile","outputDirectory","setOutputDirectory","generateHeatMap","setGenerateHeatMap","processInProgress","setProcessInProgress","videoProcessorSettings","onStartClick","console","log","JSON","stringify","min","max","default","setter"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport FileUploader from \"../components/FileUploader\";\r\nimport SliderSelector from \"../components/SliderSelector\";\r\nimport ProcessingProgress from \"../components/ProcessingProgress\";\r\n\r\nconst VideoProcessor = () => {\r\n  const [personMatch, setPersonMatch] = useState(1);\r\n  const [skippedFrames, setSkippedFrames] = useState(10);\r\n  const [videoFile, setVideoFile] = useState(\"\");\r\n  const [neuralMap, setNeuralMap] = useState(\"\");\r\n  const [classFile, setClassFile] = useState(\"\");\r\n  const [outputDirectory, setOutputDirectory] = useState(\"\");\r\n  const [generateHeatMap, setGenerateHeatMap] = useState(\"NO\");\r\n  const [processInProgress, setProcessInProgress] = useState(false);\r\n\r\n  const videoProcessorSettings = {\r\n    personMatch,\r\n    skippedFrames,\r\n    videoFile,\r\n    neuralMap,\r\n    classFile,\r\n    outputDirectory,\r\n    generateHeatMap,\r\n  };\r\n\r\n  const onStartClick = () => {\r\n    setProcessInProgress(true);\r\n    // Acá tendríamos que esta info de alguna manera mandarla al programa para que la pueda interpretar\r\n    console.log(JSON.stringify(videoProcessorSettings));\r\n  };\r\n  return (\r\n    <div className=\"video-processor-container\">\r\n      <h1>IA MapaGen - Procesador de video</h1>\r\n      <FileUploader legend=\"Video a analizar\" uploadFile={setVideoFile} />\r\n      <FileUploader legend=\"Red neuronal\" uploadFile={setNeuralMap}  />\r\n      <FileUploader legend=\"Archivo de clases\" uploadFile={setClassFile} />\r\n      \r\n      <input\r\n\t\t\t  type=\"radio\"\r\n\t\t\t  name=\"mapaCalor\"\r\n\t\t\t  onChange={setGenerateHeatMap}\r\n\t\t\t  value=\"SI\"\r\n\t\t\t  checked={generateHeatMap === \"SI\"}\r\n\t\t\t/> SI\r\n\r\n\t\t\t<input\r\n\t\t\t  type=\"radio\"\r\n\t\t\t  name=\"mapaCalor\"\r\n\t\t\t  onChange={setGenerateHeatMap}\r\n\t\t\t  value=\"NO\"\r\n\t\t\t  checked={generateHeatMap === \"NO\"}\r\n\t\t\t/> NO\r\n      \r\n      <SliderSelector\r\n        label=\"Porcentaje de coincidencia para detecciones\"\r\n        explanation=\"Se recomienda ingresar un valor bajo para que se detecte a todas las personas de la imagen, por más que tenga una baja probabilidad de ser una persona.\"\r\n        values={{\r\n          min: 1,\r\n          max: 99,\r\n          default: personMatch,\r\n          setter: setPersonMatch,\r\n        }}\r\n        isPercentage\r\n      />\r\n      <SliderSelector\r\n        label=\"Cada cuantos frames analizar\"\r\n        explanation=\"Se saltearán varios frames para acelerar el procesamiento del video. A mayor número, procesamiento más rápido.\"\r\n        values={{\r\n          min: 1,\r\n          max: 24,\r\n          default: skippedFrames,\r\n          setter: setSkippedFrames,\r\n        }}\r\n      />\r\n      <Button variant=\"contained\" color=\"primary\" onClick={onStartClick}>\r\n        Iniciar\r\n      </Button>\r\n      <ProcessingProgress\r\n        isOpen={processInProgress}\r\n        close={() => setProcessInProgress(false)}\r\n        estado={videoProcessorSettings}\r\n        heatMap={false}\r\n        />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoProcessor;\r\n"]},"metadata":{},"sourceType":"module"}