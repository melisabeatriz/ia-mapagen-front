{"ast":null,"code":"var _jsxFileName = \"C:\\\\IA_MapaGen\\\\Web\\\\frontend\\\\ia-mapagen-front\\\\ia-mapagen-front-app\\\\src\\\\screens\\\\HeatMapProcessor.js\";\nimport React, { useState } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport FileUploader from \"../components/FileUploader\";\nimport SliderSelector from \"../components/SliderSelector\";\nimport ProcessingProgress from \"../components/ProcessingProgress\";\n\nconst HeatMapProcessor = () => {\n  const [squaresQty, setSquaresQty] = useState(213);\n  const [hRadius, setHRadius] = useState(179);\n  const [maxIntensity, setMaxIntensity] = useState(50);\n  const [videoFile, setVideoFile] = useState(\"\");\n  const [CSVFile, setCSVFile] = useState(\"\");\n  const [processInProgress, setProcessInProgress] = useState(false);\n  const heatMapProcessorSettings = {\n    videoFile,\n    CSVFile,\n    squaresQty,\n    hRadius,\n    maxIntensity\n  };\n\n  const onStartClick = () => {\n    setProcessInProgress(true); // Acá tendríamos que esta info de alguna manera mandarla al programa para que la pueda interpretar\n\n    console.log(JSON.stringify(heatMapProcessorSettings));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"video-processor-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, \"IA MapaGen - Generador de mapa de calor\"), /*#__PURE__*/React.createElement(FileUploader, {\n    uploadFile: setVideoFile,\n    legend: \"Video a analizar (se tomar\\xE1 la imagen para generar el mapa)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FileUploader, {\n    uploadFile: setCSVFile,\n    legend: \"Archivo SCV\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SliderSelector, {\n    label: \"Cantidad de cuadrados de la grilla\",\n    explanation: \"A mayor n\\xFAmero, los cuadrados ser\\xE1n m\\xE1s chiquitos y tendr\\xE1n mejor definici\\xF3n.\",\n    values: {\n      min: 85,\n      max: 426,\n      default: squaresQty,\n      setter: setSquaresQty\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SliderSelector, {\n    label: \"Radio H\",\n    explanation: \"A mayor valor, las \\xE1reas rojas se har\\xE1n m\\xE1s grandes.\",\n    values: {\n      min: 102,\n      max: 204,\n      default: hRadius,\n      setter: setHRadius\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SliderSelector, {\n    label: \"Intensidad m\\xE1xima\",\n    explanation: \"Define la escala de valores. Si se quiere generar mapas de calor de diferentes c\\xE1maras que mantengan el mismo l\\xEDmite\\r m\\xE1ximo, debe ingresar el mismo l\\xEDmite m\\xE1ximo al generar todos los mapas de calor.\",\n    values: {\n      min: 30,\n      max: 100,\n      default: maxIntensity,\n      setter: setMaxIntensity\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: onStartClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, \"Iniciar\"), /*#__PURE__*/React.createElement(ProcessingProgress, {\n    isOpen: processInProgress,\n    close: () => setProcessInProgress(false),\n    estado: heatMapProcessorSettings,\n    heatMap: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default HeatMapProcessor;","map":{"version":3,"sources":["C:/IA_MapaGen/Web/frontend/ia-mapagen-front/ia-mapagen-front-app/src/screens/HeatMapProcessor.js"],"names":["React","useState","Button","FileUploader","SliderSelector","ProcessingProgress","HeatMapProcessor","squaresQty","setSquaresQty","hRadius","setHRadius","maxIntensity","setMaxIntensity","videoFile","setVideoFile","CSVFile","setCSVFile","processInProgress","setProcessInProgress","heatMapProcessorSettings","onStartClick","console","log","JSON","stringify","min","max","default","setter"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport FileUploader from \"../components/FileUploader\";\r\nimport SliderSelector from \"../components/SliderSelector\";\r\nimport ProcessingProgress from \"../components/ProcessingProgress\";\r\n\r\nconst HeatMapProcessor = () => {\r\n  const [squaresQty, setSquaresQty] = useState(213);\r\n  const [hRadius, setHRadius] = useState(179);\r\n  const [maxIntensity, setMaxIntensity] = useState(50);\r\n  const [videoFile, setVideoFile] = useState(\"\");\r\n  const [CSVFile, setCSVFile] = useState(\"\");\r\n  const [processInProgress, setProcessInProgress] = useState(false);\r\n\r\n  const heatMapProcessorSettings = {\r\n    videoFile,\r\n    CSVFile,\r\n    squaresQty,\r\n    hRadius,\r\n    maxIntensity,\r\n  };\r\n\r\n  const onStartClick = () => {\r\n    setProcessInProgress(true);\r\n    // Acá tendríamos que esta info de alguna manera mandarla al programa para que la pueda interpretar\r\n    console.log(JSON.stringify(heatMapProcessorSettings));\r\n  };\r\n  return (\r\n    <div className=\"video-processor-container\">\r\n      <h1>IA MapaGen - Generador de mapa de calor</h1>\r\n      <FileUploader\r\n        uploadFile={setVideoFile}\r\n        legend=\"Video a analizar (se tomará la imagen para generar el mapa)\"\r\n      />\r\n      <FileUploader uploadFile={setCSVFile} legend=\"Archivo SCV\" />\r\n      <SliderSelector\r\n        label=\"Cantidad de cuadrados de la grilla\"\r\n        explanation=\"A mayor número, los cuadrados serán más chiquitos y tendrán mejor definición.\"\r\n        values={{\r\n          min: 85,\r\n          max: 426,\r\n          default: squaresQty,\r\n          setter: setSquaresQty,\r\n        }}\r\n      />\r\n      <SliderSelector\r\n        label=\"Radio H\"\r\n        explanation=\"A mayor valor, las áreas rojas se harán más grandes.\"\r\n        values={{\r\n          min: 102,\r\n          max: 204,\r\n          default: hRadius,\r\n          setter: setHRadius,\r\n        }}\r\n      />\r\n      <SliderSelector\r\n        label=\"Intensidad máxima\"\r\n        explanation=\"Define la escala de valores. Si se quiere generar mapas de calor de diferentes cámaras que mantengan el mismo límite\r\n        máximo, debe ingresar el mismo límite máximo al generar todos los mapas de calor.\"\r\n        values={{\r\n          min: 30,\r\n          max: 100,\r\n          default: maxIntensity,\r\n          setter: setMaxIntensity,\r\n        }}\r\n      />\r\n      <Button variant=\"contained\" color=\"primary\" onClick={onStartClick}>\r\n        Iniciar\r\n      </Button>\r\n      <ProcessingProgress\r\n        isOpen={processInProgress}\r\n        close={() => setProcessInProgress(false)}\r\n        estado={heatMapProcessorSettings}\r\n        heatMap={true}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HeatMapProcessor;\r\n"]},"metadata":{},"sourceType":"module"}