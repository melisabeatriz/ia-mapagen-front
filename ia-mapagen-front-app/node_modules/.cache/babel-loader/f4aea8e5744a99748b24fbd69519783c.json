{"ast":null,"code":"var _jsxFileName = \"C:\\\\IA_MapaGen\\\\Web\\\\frontend\\\\ia-mapagen-front\\\\ia-mapagen-front-app\\\\src\\\\processingVideo.js\";\nimport React, { Component } from 'react';\nimport ProgressBar from \"./components/ProgressBar\"; //import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport * as data from \"./salidaPython.json\";\nimport { LinearProgress, Button } from \"@material-ui/core\";\n\nclass processingVideo extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      trascurrido: \"\",\n      restante: \"\",\n      porcentaje: 0.0,\n      estado: \"\",\n      pid: -1,\n      cancelado: 'blue'\n    };\n\n    this.performTimeConsumingTask = async () => {\n      return new Promise(resolve => setTimeout(() => {\n        resolve('result');\n      }, 3000));\n    };\n\n    this.actualizarPorc = async () => {\n      const self = this;\n\n      while (self.state.porcentaje < 100 && self.state.estado != \"Detenido\" && self.state.estado != \"Proceso Finalizado\" && self.state.estado != \"Proceso interrumpido por el usuario\" && self.state.estado != \"Ha ocurrido un error en el procesamiento\") {\n        const data = await this.performTimeConsumingTask();\n        await fetch('/actualizarPorcentaje').then(res => res.json()).then(data => {\n          self.setState({\n            porcentaje: data.porcentaje,\n            estado: data.estado,\n            transcurrido: data.transcurrido,\n            restante: data.restante\n          });\n        });\n        console.log(\"Porcentaje: \" + self.state.porcentaje);\n      }\n    };\n\n    this.simular = async () => {\n      const self = this;\n      console.log(\"parametros en simular: \" + this.props.parametros.neuralMap); //trato leer paramtetros\n\n      console.log(\"ejecuto Video Processor\");\n      await fetch('/resetPorcentaje').then(res => res.json()).then(data => {\n        self.setState({\n          porcentaje: data.porcentaje,\n          estado: data.estado,\n          transcurrido: data.transcurrido,\n          restante: data.restante\n        });\n      }); //http://localhost:5000/runVideoProcessor?\n      //pathVideoToAnalizer=\"C:\\pathVideoToAnalizer.csv\"&pathVideoOutput=\"C:\\pathVideoOutput.avi\"&pathNeural=\"C:\\pathNeural&pathClassFile=\"C:\\pathClassFile&minPercentage=100&numberOfFrames=20\"\n\n      self.setState({\n        cancelado: 'blue'\n      });\n      /*\n          personMatch,\n          skippedFrames,\n          videoFile,\n          neuralMap,\n          classFile,\n        */\n\n      let parametros_run = 'pathVideoToAnalizer=\"' + this.props.parametros.videoFile + '\"&pathVideoOutput=\"' + 'pathVideoOutput.avi' + '\"&pathNeural=\"' + this.props.parametros.neuralMap + '\"&pathClassFile=\"' + this.props.parametros.classFile + '\"&minPercentage=\"' + this.props.parametros.personMatch + '\"&numberOfFrames=\"' + this.props.parametros.skippedFrames + '\"';\n      console.log(\"cadena enviada\", parametros_run);\n      /*await fetch('/runVideoProcessor?'+ parametros_run ).then(res => res.json()).then((data) => \n          {\n            self.state.pid = data.proceso\n          })  \n          \n      */\n\n      var exec = require('child_process').execFile;\n\n      exec('C:\\IA_MapaGen\\Proceso\\IA_MapaGen_Proceso.exe', [parametros_run], function (err, data) {\n        console.log(err);\n        console.log(data.toString());\n      });\n      /*\n      await fetch('/runHeatMapWithParameters').then(res => res.json())\n      .then((data) => {\n        self.state.pid = data.proceso\n      })  */\n\n      console.log(\"Porcentaje: \" + self.state.porcentaje);\n      this.actualizarPorc();\n      console.log(\"CREE PROCESO: \" + self.state.pid);\n    };\n\n    this.simularHeatMap = async () => {\n      const self = this;\n      console.log(\"parametros en simular Heat Map: \" + this.props.parametros); //trato leer paramtetros\n\n      console.log(\"ejecuto heatMAP\");\n      await fetch('/resetPorcentaje').then(res => res.json()).then(data => {\n        self.setState({\n          porcentaje: data.porcentaje,\n          estado: data.estado,\n          transcurrido: data.transcurrido,\n          restante: data.restante\n        });\n      }); //http://localhost:5000/runHeatMap?\n      //pathCSVFile=\"C:\\pathCSVFile.csv\"&pathVideoToAnalizer=\"C:\\pathVideoToAnalizer.avi\"&squaresQuantity=10&radiusH=5&pathHeatMapGenerate=\"C:\\pathHeatMapGenerate.csv\"\n\n      self.setState({\n        cancelado: 'blue'\n      });\n      /*\n          videoFile,\n          CSVFile,\n          squaresQty,\n          hRadius,\n          maxIntensity,\n        */\n\n      let parametros_run = 'pathCSVFile=\"' + this.props.parametros.CSVFile + '\"&pathVideoToAnalizer=\"' + this.props.parametros.videoFile + '\"&squaresQuantity=\"' + this.props.parametros.squaresQty + '\"&radiusH=\"' + this.props.parametros.hRadius + '\"&pathHeatMapGenerate=\"' + 'pathHeatMapGenerate.map' + '\"&maxIntensity=\"' + this.props.parametros.maxIntensity + '\"';\n      console.log(\"cadena enviada\", parametros_run);\n      await fetch('/runHeatMap?' + parametros_run).then(res => res.json()).then(data => {\n        self.state.pid = data.proceso;\n      });\n      /*\n      await fetch('/runHeatMapWithParameters').then(res => res.json())\n      .then((data) => {\n        self.state.pid = data.proceso\n      })  */\n\n      console.log(\"Porcentaje: \" + self.state.porcentaje);\n      this.actualizarPorc();\n      console.log(\"CREE PROCESO: \" + self.state.pid);\n    };\n\n    this.detener = async () => {\n      const self = this;\n      console.log(\"MATO PROCESO: \" + self.state.pid);\n      await fetch('/stopHeatMap?pidToKill=' + self.state.pid).then(res => res.json()).then(data => {\n        console.log(\"Resultado Detener: \", data.status);\n      });\n      self.setState({\n        porcentaje: 100\n      });\n      self.setState({\n        cancelado: 'red'\n      });\n      await fetch('/finalizarActualizarPorcentaje').then(res => res.json()).then(data => {\n        self.setState({\n          porcentaje: data.porcentaje,\n          estado: data.estado,\n          transcurrido: data.transcurrido,\n          restante: data.restante\n        });\n      });\n      console.log(\"Porcentaje: \" + self.state.porcentaje);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 5\n      }\n    }, console.log(\"param en render\", this.props.heatMap), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      \"margin-bottom\": \"20px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"outlined\",\n      onClick: this.props.heatMap ? () => this.simularHeatMap() : () => this.simular(),\n      param: this.props.parametros,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }\n    }, \"Comenzar\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }\n    }, \"  \\xA0\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"outlined\",\n      onClick: () => this.detener(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }\n    }, \"Detener\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progressBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ProgressBar, {\n      variant: \"determinate\",\n      porcentaje: this.state.porcentaje,\n      estado: this.state.estado,\n      cancelado: this.state.cancelado,\n      transcurrido: this.state.transcurrido,\n      restante: this.state.restante,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 7\n      }\n    })));\n  }\n\n}\n\nexport default processingVideo;","map":{"version":3,"sources":["C:/IA_MapaGen/Web/frontend/ia-mapagen-front/ia-mapagen-front-app/src/processingVideo.js"],"names":["React","Component","ProgressBar","data","LinearProgress","Button","processingVideo","state","trascurrido","restante","porcentaje","estado","pid","cancelado","performTimeConsumingTask","Promise","resolve","setTimeout","actualizarPorc","self","fetch","then","res","json","setState","transcurrido","console","log","simular","props","parametros","neuralMap","parametros_run","videoFile","classFile","personMatch","skippedFrames","exec","require","execFile","err","toString","simularHeatMap","CSVFile","squaresQty","hRadius","maxIntensity","proceso","detener","status","render","heatMap"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,0BAAxB,C,CACA;;AACA,OAAO,KAAKC,IAAZ,MAAsB,qBAAtB;AACA,SAAUC,cAAV,EAA0BC,MAA1B,QAAwC,mBAAxC;;AAEA,MAAMC,eAAN,SAA8BL,SAA9B,CAAwC;AAAA;AAAA;AAAA,SACxCM,KADwC,GAClC;AACJC,MAAAA,WAAW,EAAE,EADT;AAEJC,MAAAA,QAAQ,EAAE,EAFN;AAGJC,MAAAA,UAAU,EAAE,GAHR;AAIJC,MAAAA,MAAM,EAAE,EAJJ;AAKJC,MAAAA,GAAG,EAAE,CAAC,CALF;AAMJC,MAAAA,SAAS,EAAE;AANP,KADkC;;AAAA,SAUxCC,wBAVwC,GAUb,YAAW;AACpC,aAAO,IAAIC,OAAJ,CAAaC,OAAD,IACjBC,UAAU,CACR,MAAM;AAAED,QAAAA,OAAO,CAAC,QAAD,CAAP;AAAmB,OADnB,EAER,IAFQ,CADL,CAAP;AAMC,KAjBqC;;AAAA,SAmBxCE,cAnBwC,GAmBzB,YAAS;AACtB,YAAMC,IAAI,GAAC,IAAX;;AACA,aAAOA,IAAI,CAACZ,KAAL,CAAWG,UAAX,GAAwB,GAAxB,IAA+BS,IAAI,CAACZ,KAAL,CAAWI,MAAX,IAAqB,UAApD,IAAkEQ,IAAI,CAACZ,KAAL,CAAWI,MAAX,IAAqB,oBAAvF,IAA+GQ,IAAI,CAACZ,KAAL,CAAWI,MAAX,IAAqB,qCAApI,IAA6KQ,IAAI,CAACZ,KAAL,CAAWI,MAAX,IAAqB,0CAAzM,EAAoP;AAClP,cAAMR,IAAI,GAAG,MAAM,KAAKW,wBAAL,EAAnB;AACA,cAAMM,KAAK,CAAC,uBAAD,CAAL,CAA+BC,IAA/B,CAAoCC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAA3C,EACDF,IADC,CACKlB,IAAD,IAAU;AACdgB,UAAAA,IAAI,CAACK,QAAL,CAAc;AAAEd,YAAAA,UAAU,EAAEP,IAAI,CAACO,UAAnB;AAA+BC,YAAAA,MAAM,EAAER,IAAI,CAACQ,MAA5C;AAAoDc,YAAAA,YAAY,EAAEtB,IAAI,CAACsB,YAAvE;AAAqFhB,YAAAA,QAAQ,EAAEN,IAAI,CAACM;AAApG,WAAd;AACD,SAHC,CAAN;AAIIiB,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBR,IAAI,CAACZ,KAAL,CAAWG,UAAxC;AACH;AACJ,KA7BuC;;AAAA,SA+BxCkB,OA/BwC,GA+BhC,YAAS;AACf,YAAMT,IAAI,GAAC,IAAX;AAEAO,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAA6B,KAAKE,KAAL,CAAWC,UAAX,CAAsBC,SAA/D,EAHe,CAG4D;;AAE3EL,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,YAAMP,KAAK,CAAC,kBAAD,CAAL,CAA0BC,IAA1B,CAA+BC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAtC,EACLF,IADK,CACClB,IAAD,IAAU;AACdgB,QAAAA,IAAI,CAACK,QAAL,CAAc;AAAEd,UAAAA,UAAU,EAAEP,IAAI,CAACO,UAAnB;AAA+BC,UAAAA,MAAM,EAAER,IAAI,CAACQ,MAA5C;AAAoDc,UAAAA,YAAY,EAAEtB,IAAI,CAACsB,YAAvE;AAAqFhB,UAAAA,QAAQ,EAAEN,IAAI,CAACM;AAApG,SAAd;AACD,OAHK,CAAN,CANe,CAUf;AACA;;AAEAU,MAAAA,IAAI,CAACK,QAAL,CAAc;AAAEX,QAAAA,SAAS,EAAE;AAAb,OAAd;AAEF;;;;;;;;AAOE,UAAImB,cAAc,GAAG,0BAAyB,KAAKH,KAAL,CAAWC,UAAX,CAAsBG,SAA/C,GAA0D,qBAA1D,GAAiF,qBAAjF,GAAwG,gBAAxG,GAA0H,KAAKJ,KAAL,CAAWC,UAAX,CAAsBC,SAAhJ,GACG,mBADH,GACwB,KAAKF,KAAL,CAAWC,UAAX,CAAsBI,SAD9C,GAC0D,mBAD1D,GACgF,KAAKL,KAAL,CAAWC,UAAX,CAAsBK,WADtG,GACmH,oBADnH,GAEK,KAAKN,KAAL,CAAWC,UAAX,CAAsBM,aAF3B,GAEyC,GAF9D;AAGAV,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BK,cAA9B;AAEA;;;;;;;AAOA,UAAIK,IAAI,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBC,QAApC;;AAEDF,MAAAA,IAAI,CAAC,8CAAD,EAAiD,CAACL,cAAD,CAAjD,EAAmE,UAASQ,GAAT,EAAcrC,IAAd,EAAoB;AACpFuB,QAAAA,OAAO,CAACC,GAAR,CAAYa,GAAZ;AACAd,QAAAA,OAAO,CAACC,GAAR,CAAYxB,IAAI,CAACsC,QAAL,EAAZ;AACH,OAHA,CAAJ;AAMC;;;;;;AAKAf,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBR,IAAI,CAACZ,KAAL,CAAWG,UAAxC;AAEA,WAAKQ,cAAL;AAEAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBR,IAAI,CAACZ,KAAL,CAAWK,GAA1C;AACD,KAnFuC;;AAAA,SAsFxC8B,cAtFwC,GAsFzB,YAAS;AACtB,YAAMvB,IAAI,GAAC,IAAX;AAEAO,MAAAA,OAAO,CAACC,GAAR,CAAY,qCAAsC,KAAKE,KAAL,CAAWC,UAA7D,EAHsB,CAGoD;;AAE1EJ,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,YAAMP,KAAK,CAAC,kBAAD,CAAL,CAA0BC,IAA1B,CAA+BC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAtC,EACLF,IADK,CACClB,IAAD,IAAU;AACdgB,QAAAA,IAAI,CAACK,QAAL,CAAc;AAAEd,UAAAA,UAAU,EAAEP,IAAI,CAACO,UAAnB;AAA+BC,UAAAA,MAAM,EAAER,IAAI,CAACQ,MAA5C;AAAoDc,UAAAA,YAAY,EAAEtB,IAAI,CAACsB,YAAvE;AAAqFhB,UAAAA,QAAQ,EAAEN,IAAI,CAACM;AAApG,SAAd;AACD,OAHK,CAAN,CANsB,CAUtB;AACA;;AAEAU,MAAAA,IAAI,CAACK,QAAL,CAAc;AAAEX,QAAAA,SAAS,EAAE;AAAb,OAAd;AAEF;;;;;;;;AAOE,UAAImB,cAAc,GAAG,kBAAiB,KAAKH,KAAL,CAAWC,UAAX,CAAsBa,OAAvC,GAAgD,yBAAhD,GAA2E,KAAKd,KAAL,CAAWC,UAAX,CAAsBG,SAAjG,GACG,qBADH,GAC0B,KAAKJ,KAAL,CAAWC,UAAX,CAAsBc,UADhD,GAC6D,aAD7D,GAC6E,KAAKf,KAAL,CAAWC,UAAX,CAAsBe,OADnG,GAC6G,yBAD7G,GAC0I,yBAD1I,GAEG,kBAFH,GAEwB,KAAKhB,KAAL,CAAWC,UAAX,CAAsBgB,YAF9C,GAE4D,GAFjF;AAGApB,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BK,cAA9B;AAEA,YAAMZ,KAAK,CAAC,iBAAgBY,cAAjB,CAAL,CAAuCX,IAAvC,CAA4CC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAnD,EAA+DF,IAA/D,CAAqElB,IAAD,IACtE;AACEgB,QAAAA,IAAI,CAACZ,KAAL,CAAWK,GAAX,GAAiBT,IAAI,CAAC4C,OAAtB;AACD,OAHC,CAAN;AAIA;;;;;;AAKArB,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBR,IAAI,CAACZ,KAAL,CAAWG,UAAxC;AAEA,WAAKQ,cAAL;AAEAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBR,IAAI,CAACZ,KAAL,CAAWK,GAA1C;AACD,KA/HuC;;AAAA,SAiIxCoC,OAjIwC,GAiIhC,YAAS;AACf,YAAM7B,IAAI,GAAC,IAAX;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBR,IAAI,CAACZ,KAAL,CAAWK,GAA1C;AACE,YAAMQ,KAAK,CAAC,4BAA4BD,IAAI,CAACZ,KAAL,CAAWK,GAAxC,CAAL,CAAkDS,IAAlD,CAAuDC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAA9D,EACLF,IADK,CACClB,IAAD,IAAU;AACduB,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCxB,IAAI,CAAC8C,MAAxC;AACD,OAHK,CAAN;AAIF9B,MAAAA,IAAI,CAACK,QAAL,CAAc;AAAEd,QAAAA,UAAU,EAAE;AAAd,OAAd;AACAS,MAAAA,IAAI,CAACK,QAAL,CAAc;AAAEX,QAAAA,SAAS,EAAE;AAAb,OAAd;AAEA,YAAMO,KAAK,CAAC,gCAAD,CAAL,CAAwCC,IAAxC,CAA6CC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAApD,EACCF,IADD,CACOlB,IAAD,IAAU;AACdgB,QAAAA,IAAI,CAACK,QAAL,CAAc;AAAEd,UAAAA,UAAU,EAAEP,IAAI,CAACO,UAAnB;AAA+BC,UAAAA,MAAM,EAAER,IAAI,CAACQ,MAA5C;AAAoDc,UAAAA,YAAY,EAAEtB,IAAI,CAACsB,YAAvE;AAAqFhB,UAAAA,QAAQ,EAAEN,IAAI,CAACM;AAApG,SAAd;AACD,OAHD,CAAN;AAIMiB,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBR,IAAI,CAACZ,KAAL,CAAWG,UAAxC;AACP,KAhJuC;AAAA;;AAmJxCwC,EAAAA,MAAM,GAAE;AACN,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGxB,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+B,KAAKE,KAAL,CAAWsB,OAA1C,CADH,eAEA;AAAK,MAAA,SAAS,EAAC,KAAf;AAAqB,uBAAc,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,UAAhB;AAA2B,MAAA,OAAO,EAAE,KAAKtB,KAAL,CAAWsB,OAAX,GAAqB,MAAI,KAAKT,cAAL,EAAzB,GAAiD,MAAI,KAAKd,OAAL,EAAzF;AAA0G,MAAA,KAAK,EAAE,KAAKC,KAAL,CAAWC,UAA5H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAOI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,UAAhB;AAA2B,MAAA,OAAO,EAAE,MAAI,KAAKkB,OAAL,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAPJ,CAFA,eAaE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEA,oBAAC,WAAD;AAAa,MAAA,OAAO,EAAC,aAArB;AACE,MAAA,UAAU,EAAE,KAAKzC,KAAL,CAAWG,UADzB;AAEE,MAAA,MAAM,EAAE,KAAKH,KAAL,CAAWI,MAFrB;AAGE,MAAA,SAAS,EAAE,KAAKJ,KAAL,CAAWM,SAHxB;AAIE,MAAA,YAAY,EAAE,KAAKN,KAAL,CAAWkB,YAJ3B;AAKE,MAAA,QAAQ,EAAE,KAAKlB,KAAL,CAAWE,QALvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,CAbF,CADF;AA2BD;;AA/KuC;;AAiLxC,eAAeH,eAAf","sourcesContent":["import React, { Component } from 'react';\nimport ProgressBar from \"./components/ProgressBar\";\n//import 'bootstrap/dist/css/bootstrap.min.css';\nimport * as data from \"./salidaPython.json\";\nimport {  LinearProgress, Button } from \"@material-ui/core\";\n\nclass processingVideo extends Component {\nstate={\n  trascurrido: \"\",\n  restante: \"\",\n  porcentaje: 0.0,\n  estado: \"\",\n  pid: -1,\n  cancelado: 'blue'\n}\n\nperformTimeConsumingTask = async() => {\n  return new Promise((resolve) =>\n    setTimeout(\n      () => { resolve('result') },\n      3000\n    )\n  )\n  }\n\nactualizarPorc=async()=>{\n  const self=this;\n  while (self.state.porcentaje < 100 && self.state.estado != \"Detenido\" && self.state.estado != \"Proceso Finalizado\" && self.state.estado != \"Proceso interrumpido por el usuario\" && self.state.estado != \"Ha ocurrido un error en el procesamiento\"){\n    const data = await this.performTimeConsumingTask();\n    await fetch('/actualizarPorcentaje').then(res => res.json())\n        .then((data) => {\n          self.setState({ porcentaje: data.porcentaje, estado: data.estado, transcurrido: data.transcurrido, restante: data.restante })\n        })\n        console.log(\"Porcentaje: \" + self.state.porcentaje)   \n    }\n}\n\nsimular=async()=>{\n  const self=this;\n\n  console.log(\"parametros en simular: \" +  this.props.parametros.neuralMap)  //trato leer paramtetros\n\n  console.log(\"ejecuto Video Processor\")\n  await fetch('/resetPorcentaje').then(res => res.json())\n  .then((data) => {\n    self.setState({ porcentaje: data.porcentaje, estado: data.estado, transcurrido: data.transcurrido, restante: data.restante })\n  })  \n  //http://localhost:5000/runVideoProcessor?\n  //pathVideoToAnalizer=\"C:\\pathVideoToAnalizer.csv\"&pathVideoOutput=\"C:\\pathVideoOutput.avi\"&pathNeural=\"C:\\pathNeural&pathClassFile=\"C:\\pathClassFile&minPercentage=100&numberOfFrames=20\"\n  \n  self.setState({ cancelado: 'blue' })\n  \n/*\n    personMatch,\n    skippedFrames,\n    videoFile,\n    neuralMap,\n    classFile,\n  */\n  let parametros_run = 'pathVideoToAnalizer=\"'+ this.props.parametros.videoFile +'\"&pathVideoOutput=\"'+ 'pathVideoOutput.avi' +'\"&pathNeural=\"'+ this.props.parametros.neuralMap +\n                          '\"&pathClassFile=\"'+ this.props.parametros.classFile + '\"&minPercentage=\"'+  this.props.parametros.personMatch +'\"&numberOfFrames=\"'\n                          + this.props.parametros.skippedFrames+'\"';\n  console.log(\"cadena enviada\", parametros_run);                      \n\n  /*await fetch('/runVideoProcessor?'+ parametros_run ).then(res => res.json()).then((data) => \n      {\n        self.state.pid = data.proceso\n      })  \n      \n  */      \n  \n  var exec = require('child_process').execFile;\n\n\texec('C:\\IA_MapaGen\\Proceso\\IA_MapaGen_Proceso.exe', [parametros_run], function(err, data) {  \n        console.log(err)\n        console.log(data.toString());                       \n    });  \n      \n      \n  /*\n  await fetch('/runHeatMapWithParameters').then(res => res.json())\n  .then((data) => {\n    self.state.pid = data.proceso\n  })  */\n  console.log(\"Porcentaje: \" + self.state.porcentaje)   \n  \n  this.actualizarPorc()\n\n  console.log(\"CREE PROCESO: \" + self.state.pid)   \n}\n\n/* ejecutar Heat Map*/\nsimularHeatMap=async()=>{\n  const self=this;\n\n  console.log(\"parametros en simular Heat Map: \" +  this.props.parametros)  //trato leer paramtetros\n\n  console.log(\"ejecuto heatMAP\")\n  await fetch('/resetPorcentaje').then(res => res.json())\n  .then((data) => {\n    self.setState({ porcentaje: data.porcentaje, estado: data.estado, transcurrido: data.transcurrido, restante: data.restante })\n  })  \n  //http://localhost:5000/runHeatMap?\n  //pathCSVFile=\"C:\\pathCSVFile.csv\"&pathVideoToAnalizer=\"C:\\pathVideoToAnalizer.avi\"&squaresQuantity=10&radiusH=5&pathHeatMapGenerate=\"C:\\pathHeatMapGenerate.csv\"\n\n  self.setState({ cancelado: 'blue' })\n  \n/*\n    videoFile,\n    CSVFile,\n    squaresQty,\n    hRadius,\n    maxIntensity,\n  */\n  let parametros_run = 'pathCSVFile=\"'+ this.props.parametros.CSVFile +'\"&pathVideoToAnalizer=\"'+ this.props.parametros.videoFile +\n                          '\"&squaresQuantity=\"'+ this.props.parametros.squaresQty + '\"&radiusH=\"'+  this.props.parametros.hRadius + '\"&pathHeatMapGenerate=\"'  + 'pathHeatMapGenerate.map' +\n                          '\"&maxIntensity=\"' + this.props.parametros.maxIntensity +'\"';\n  console.log(\"cadena enviada\", parametros_run);                      \n\n  await fetch('/runHeatMap?'+ parametros_run ).then(res => res.json()).then((data) => \n      {\n        self.state.pid = data.proceso\n      })  \n  /*\n  await fetch('/runHeatMapWithParameters').then(res => res.json())\n  .then((data) => {\n    self.state.pid = data.proceso\n  })  */\n  console.log(\"Porcentaje: \" + self.state.porcentaje)   \n  \n  this.actualizarPorc()\n\n  console.log(\"CREE PROCESO: \" + self.state.pid)   \n}\n\ndetener=async()=>{\n  const self=this;  \n  console.log(\"MATO PROCESO: \" + self.state.pid)\n    await fetch('/stopHeatMap?pidToKill=' + self.state.pid).then(res => res.json())\n    .then((data) => {\n      console.log(\"Resultado Detener: \", data.status )\n    })  \n  self.setState({ porcentaje: 100 })\n  self.setState({ cancelado: 'red' })\n\n  await fetch('/finalizarActualizarPorcentaje').then(res => res.json())\n        .then((data) => {\n          self.setState({ porcentaje: data.porcentaje, estado: data.estado, transcurrido: data.transcurrido, restante: data.restante })\n        })\n        console.log(\"Porcentaje: \" + self.state.porcentaje)   \n}\n\n\nrender(){\n  return (\n    <div>\n      {console.log(\"param en render\" ,this.props.heatMap)}\n    <div className=\"App\" margin-bottom=\"20px\">\n        <Button variant=\"outlined\" onClick={this.props.heatMap ? ()=>this.simularHeatMap() : ()=>this.simular() } param={this.props.parametros}>\n          Comenzar\n        </Button>\n        <div>  &nbsp;\n        </div>  \n\n        <Button variant=\"outlined\" onClick={()=>this.detener()}>\n          Detener \n        </Button>\n      </div>  \n      <div className=\"progressBar\">\n      {\n      <ProgressBar variant=\"determinate\" \n        porcentaje={this.state.porcentaje}\n        estado={this.state.estado}        \n        cancelado={this.state.cancelado}\n        transcurrido={this.state.transcurrido}  \n        restante={this.state.restante}    \n      />\n      }    \n      </div>      \n    </div>\n  );\n}\n}\nexport default processingVideo;\n"]},"metadata":{},"sourceType":"module"}